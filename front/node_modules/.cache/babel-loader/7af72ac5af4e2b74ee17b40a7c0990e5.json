{"ast":null,"code":"var _jsxFileName = \"/home/milan/react-excercise/front/src/components/DataVisualization.js\",\n    _s = $RefreshSig$();\n\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport InputEmmiter from \"../services/InputEmmiter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst buttons = [{\n  value: \"Female\",\n  key: \"FMLE\",\n  active: true\n}, {\n  value: \"Median\",\n  key: \"BTSX\",\n  active: true\n}, {\n  value: \"Male\",\n  key: \"MLE\",\n  active: true\n}, {\n  value: \"Compare\",\n  key: \"CMP\",\n  active: false\n}];\n\nconst formatRangeValues = data => {\n  const valuesArray = data.map(_ref => {\n    let {\n      TimeDimensionValue\n    } = _ref;\n    return TimeDimensionValue;\n  });\n  const rangeMinMaxValues = [Math.min(...valuesArray), Math.max(...valuesArray)];\n  InputEmmiter.rangeMinMaxValues.next(rangeMinMaxValues);\n  return rangeMinMaxValues;\n};\n\nconst dataFilter = (key, data) => {\n  let series;\n  series = data === null || data === void 0 ? void 0 : data.filter(_ref2 => {\n    let {\n      Dim1\n    } = _ref2;\n    return Dim1 === key;\n  }).map(_ref3 => {\n    let {\n      TimeDimensionValue,\n      NumericValue\n    } = _ref3;\n    return [TimeDimensionValue, NumericValue];\n  }).sort((a, b) => {\n    return a[0] - b[0];\n  });\n  return series;\n};\n\nconst getMinYAxisValue = data => {\n  let extractedValues = [];\n  data.forEach(arr => {\n    extractedValues.push(arr[1]);\n  });\n  return Math.floor(Math.min(...extractedValues));\n};\n\nconst getChartOptions = (buttons, data) => {\n  let options;\n\n  if (buttons[buttons.length - 1].active) {\n    options = comparisonChartOptions(data);\n  } else options = lineChartOptions(buttons, data);\n\n  return options;\n};\n\nconst lineChartOptions = (buttons, data) => {\n  const series = [];\n  let options = {};\n  buttons.forEach(btn => {\n    if (btn.active) {\n      series.push({\n        name: btn.value,\n        data: dataFilter(btn.key, data),\n        color: `hsl(${buttons.indexOf(btn) * 120}, 100%, 50%)`,\n        marker: {\n          symbol: \"circle\"\n        }\n      });\n    }\n  });\n  options = {\n    chart: {\n      type: \"line\",\n      animation: false,\n      marginRight: 50\n    },\n    title: {\n      text: \"Blood Pressure index for population\"\n    },\n    yAxis: {\n      min: null,\n      max: null\n    },\n    xAxis: {\n      reversed: false,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: `Blood pressure index for chosen categories`\n      }\n    },\n    plotOptions: {\n      series: {\n        animation: false,\n        stacking: undefined,\n        events: {\n          legendItemClick: function () {\n            return false;\n          }\n        }\n      }\n    },\n    series: series\n  };\n  return options;\n};\n\nconst comparisonChartOptions = data => {\n  let options = {\n    title: {\n      text: \"Blood Pressure index comparison by gender\"\n    }\n  };\n  const femaleSeries = dataFilter(\"FMLE\", data);\n  const maleSeries = dataFilter(\"MLE\", data);\n  maleSeries.forEach(s => {\n    s[1] = s[1] * -1;\n  });\n  const yAxisMinValue = getMinYAxisValue(maleSeries);\n  const yAxisMaxValue = yAxisMinValue * -1;\n  options = { ...options,\n    chart: {\n      type: \"bar\",\n      animation: true\n    },\n    accessibility: {\n      point: {\n        valueDescriptionFormat: \"{index}. Age {xDescription}, {value}%.\"\n      }\n    },\n    xAxis: [{\n      reversed: false,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: \"Blood pressure index (female)\"\n      }\n    }, {\n      // mirror axis on right side\n      opposite: true,\n      reversed: false,\n      linkedTo: 0,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: \"Blood pressure index (male)\"\n      }\n    }],\n    yAxis: {\n      title: {\n        text: null\n      },\n      min: yAxisMinValue,\n      max: yAxisMaxValue,\n      labels: {\n        formatter: function () {\n          return Math.abs(this.value);\n        }\n      },\n      accessibility: {\n        description: \"Blood pressure index, comparison by gender in Serbia\"\n      }\n    },\n    plotOptions: {\n      series: {\n        stacking: \"normal\",\n        pointWidth: 5,\n        animation: false\n      }\n    },\n    tooltip: {\n      formatter: function () {\n        return \"<b>\" + this.series.name + \", year \" + this.point.category + \"</b><br/>\" + \"BP index: \" + Highcharts.numberFormat(Math.abs(this.point.y), 1);\n      }\n    },\n    series: [{\n      name: \"Male\",\n      data: maleSeries\n    }, {\n      name: \"Female\",\n      data: femaleSeries\n    }]\n  };\n  return options;\n};\n\nconst DataVisulization = _ref4 => {\n  _s();\n\n  let {\n    param\n  } = _ref4;\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n  const [rangeValues, setRangeValues] = useState([]);\n\n  const optionSetter = button => {\n    console.log(button);\n    let options;\n    let i = buttons.indexOf(button);\n    buttons[i].active = !buttons[i].active;\n    let filteredData = data === null || data === void 0 ? void 0 : data.filter(obj => obj.TimeDimensionValue >= rangeValues[0] && obj.TimeDimensionValue <= rangeValues[1]);\n\n    if (button.key !== \"CMP\") {\n      buttons[buttons.length - 1].active = false;\n      options = lineChartOptions(buttons, filteredData);\n      setChartOptions(options);\n    } else {\n      if (button.active === true) {\n        buttons.forEach(btn => {\n          if (buttons.indexOf(btn) !== buttons.length - 1) {\n            btn.active = true;\n          } else {\n            btn.active = false;\n          }\n        });\n        options = lineChartOptions(buttons, filteredData);\n        setChartOptions(options);\n      } else {\n        buttons.forEach(btn => {\n          if (buttons.indexOf(btn) !== buttons.length - 1) {\n            btn.active = false;\n          } else {\n            btn.active = true;\n          }\n        });\n        const options = comparisonChartOptions(filteredData);\n        setChartOptions(options);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getData(param);\n      setData(data);\n      const subscription = InputEmmiter.rangeEmmiter.subscribe(values => {\n        let options;\n\n        if (values.length > 0) {\n          setRangeValues(values);\n          let filteredData = data === null || data === void 0 ? void 0 : data.filter(obj => obj.TimeDimensionValue >= values[0] && obj.TimeDimensionValue <= values[1]);\n          options = getChartOptions(buttons, filteredData);\n          setChartOptions(options);\n        } else {\n          let initialRangeValues = formatRangeValues(data);\n          setRangeValues(initialRangeValues);\n          setChartOptions(getChartOptions(buttons, data));\n        }\n      });\n      return () => subscription.unsubscribe();\n    };\n\n    getData();\n  }, [param]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"graph-header\",\n      children: [param.toUpperCase(), \" GRAPH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map(b => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            optionSetter(b);\n          },\n          className: b.active ? \"button-active\" : \"\",\n          children: b.value\n        }, b.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataVisulization, \"3GcznFMuuh7JyoX0ZobqQwq/hcY=\");\n\n_c = DataVisulization;\nexport default DataVisulization;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataVisulization\");","map":{"version":3,"sources":["/home/milan/react-excercise/front/src/components/DataVisualization.js"],"names":["HighchartsReact","Highcharts","useEffect","useState","DataProvider","InputEmmiter","buttons","value","key","active","formatRangeValues","data","valuesArray","map","TimeDimensionValue","rangeMinMaxValues","Math","min","max","next","dataFilter","series","filter","Dim1","NumericValue","sort","a","b","getMinYAxisValue","extractedValues","forEach","arr","push","floor","getChartOptions","options","length","comparisonChartOptions","lineChartOptions","btn","name","color","indexOf","marker","symbol","chart","type","animation","marginRight","title","text","yAxis","xAxis","reversed","labels","step","accessibility","description","plotOptions","stacking","undefined","events","legendItemClick","femaleSeries","maleSeries","s","yAxisMinValue","yAxisMaxValue","point","valueDescriptionFormat","opposite","linkedTo","formatter","abs","pointWidth","tooltip","category","numberFormat","y","DataVisulization","param","setData","chartOptions","setChartOptions","rangeValues","setRangeValues","optionSetter","button","console","log","i","filteredData","obj","getData","subscription","rangeEmmiter","subscribe","values","initialRangeValues","unsubscribe","toUpperCase"],"mappings":"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","sourcesContent":["import HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport InputEmmiter from \"../services/InputEmmiter\";\n\nconst buttons = [\n  { value: \"Female\", key: \"FMLE\", active: true },\n  { value: \"Median\", key: \"BTSX\", active: true },\n  { value: \"Male\", key: \"MLE\", active: true },\n  { value: \"Compare\", key: \"CMP\", active: false },\n];\n\nconst formatRangeValues = (data) => {\n  const valuesArray = data.map(({ TimeDimensionValue }) => TimeDimensionValue);\n  const rangeMinMaxValues = [\n    Math.min(...valuesArray),\n    Math.max(...valuesArray),\n  ];\n  InputEmmiter.rangeMinMaxValues.next(rangeMinMaxValues);\n  return rangeMinMaxValues;\n};\n\nconst dataFilter = (key, data) => {\n  let series;\n\n  series = data\n    ?.filter(({ Dim1 }) => Dim1 === key)\n    .map(({ TimeDimensionValue, NumericValue }) => [\n      TimeDimensionValue,\n      NumericValue,\n    ])\n    .sort((a, b) => {\n      return a[0] - b[0];\n    });\n\n  return series;\n};\n\nconst getMinYAxisValue = (data) => {\n  let extractedValues = [];\n  data.forEach((arr) => {\n    extractedValues.push(arr[1]);\n  });\n\n  return Math.floor(Math.min(...extractedValues));\n};\nconst getChartOptions = (buttons, data) => {\n  let options;\n  if (buttons[buttons.length - 1].active) {\n    options = comparisonChartOptions(data);\n  } else options = lineChartOptions(buttons, data);\n  return options;\n};\n\nconst lineChartOptions = (buttons, data) => {\n  const series = [];\n  let options = {};\n  buttons.forEach((btn) => {\n    if (btn.active) {\n      series.push({\n        name: btn.value,\n        data: dataFilter(btn.key, data),\n        color: `hsl(${buttons.indexOf(btn) * 120}, 100%, 50%)`,\n        marker: {\n          symbol: \"circle\",\n        },\n      });\n    }\n  });\n\n  options = {\n    chart: { type: \"line\", animation: false, marginRight: 50 },\n    title: { text: \"Blood Pressure index for population\" },\n    yAxis: {\n      min: null,\n      max: null,\n    },\n    xAxis: {\n      reversed: false,\n      labels: {\n        step: 1,\n      },\n      accessibility: {\n        description: `Blood pressure index for chosen categories`,\n      },\n    },\n    plotOptions: {\n      series: {\n        animation: false,\n        stacking: undefined,\n        events: {\n          legendItemClick: function () {\n            return false;\n          },\n        },\n      },\n    },\n\n    series: series,\n  };\n\n  return options;\n};\n\nconst comparisonChartOptions = (data) => {\n  let options = {\n    title: { text: \"Blood Pressure index comparison by gender\" },\n  };\n  const femaleSeries = dataFilter(\"FMLE\", data);\n  const maleSeries = dataFilter(\"MLE\", data);\n  maleSeries.forEach((s) => {\n    s[1] = s[1] * -1;\n  });\n\n  const yAxisMinValue = getMinYAxisValue(maleSeries);\n  const yAxisMaxValue = yAxisMinValue * -1;\n\n  options = {\n    ...options,\n    chart: {\n      type: \"bar\",\n      animation: true,\n    },\n    accessibility: {\n      point: {\n        valueDescriptionFormat: \"{index}. Age {xDescription}, {value}%.\",\n      },\n    },\n    xAxis: [\n      {\n        reversed: false,\n        labels: {\n          step: 1,\n        },\n        accessibility: {\n          description: \"Blood pressure index (female)\",\n        },\n      },\n      {\n        // mirror axis on right side\n        opposite: true,\n        reversed: false,\n        linkedTo: 0,\n        labels: {\n          step: 1,\n        },\n        accessibility: {\n          description: \"Blood pressure index (male)\",\n        },\n      },\n    ],\n    yAxis: {\n      title: {\n        text: null,\n      },\n      min: yAxisMinValue,\n      max: yAxisMaxValue,\n      labels: {\n        formatter: function () {\n          return Math.abs(this.value);\n        },\n      },\n      accessibility: {\n        description: \"Blood pressure index, comparison by gender in Serbia\",\n      },\n    },\n    plotOptions: {\n      series: {\n        stacking: \"normal\",\n        pointWidth: 5,\n        animation: false,\n      },\n    },\n    tooltip: {\n      formatter: function () {\n        return (\n          \"<b>\" +\n          this.series.name +\n          \", year \" +\n          this.point.category +\n          \"</b><br/>\" +\n          \"BP index: \" +\n          Highcharts.numberFormat(Math.abs(this.point.y), 1)\n        );\n      },\n    },\n    series: [\n      {\n        name: \"Male\",\n        data: maleSeries,\n      },\n      {\n        name: \"Female\",\n        data: femaleSeries,\n      },\n    ],\n  };\n  return options;\n};\n\nconst DataVisulization = ({ param }) => {\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n  const [rangeValues, setRangeValues] = useState([]);\n\n  const optionSetter = (button) => {\n    console.log(button);\n    let options;\n    let i = buttons.indexOf(button);\n    buttons[i].active = !buttons[i].active;\n    let filteredData = data?.filter(\n      (obj) =>\n        obj.TimeDimensionValue >= rangeValues[0] &&\n        obj.TimeDimensionValue <= rangeValues[1]\n    );\n\n    if (button.key !== \"CMP\") {\n      buttons[buttons.length - 1].active = false;\n\n      options = lineChartOptions(buttons, filteredData);\n      setChartOptions(options);\n    } else {\n      if (button.active === true) {\n        buttons.forEach((btn) => {\n          if (buttons.indexOf(btn) !== buttons.length - 1) {\n            btn.active = true;\n          } else {\n            btn.active = false;\n          }\n        });\n        options = lineChartOptions(buttons, filteredData);\n        setChartOptions(options);\n      } else {\n        buttons.forEach((btn) => {\n          if (buttons.indexOf(btn) !== buttons.length - 1) {\n            btn.active = false;\n          } else {\n            btn.active = true;\n          }\n        });\n\n        const options = comparisonChartOptions(filteredData);\n        setChartOptions(options);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getData(param);\n      setData(data);\n      const subscription = InputEmmiter.rangeEmmiter.subscribe((values) => {\n        let options;\n        if (values.length > 0) {\n          setRangeValues(values);\n          let filteredData = data?.filter(\n            (obj) =>\n              obj.TimeDimensionValue >= values[0] &&\n              obj.TimeDimensionValue <= values[1]\n          );\n          options = getChartOptions(buttons, filteredData);\n          setChartOptions(options);\n        } else {\n          let initialRangeValues = formatRangeValues(data);\n          setRangeValues(initialRangeValues);\n          setChartOptions(getChartOptions(buttons, data));\n        }\n      });\n      return () => subscription.unsubscribe();\n    };\n\n    getData();\n  }, [param]);\n\n  return (\n    <div className=\"graph-container\">\n      <h2 className=\"graph-header\">{param.toUpperCase()} GRAPH</h2>\n      <div className=\"buttons\">\n        {buttons.map((b) => {\n          return (\n            <button\n              onClick={() => {\n                optionSetter(b);\n              }}\n              key={b.key}\n              className={b.active ? \"button-active\" : \"\"}\n            >\n              {b.value}\n            </button>\n          );\n        })}\n      </div>\n      <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n    </div>\n  );\n};\n\nexport default DataVisulization;\n"]},"metadata":{},"sourceType":"module"}