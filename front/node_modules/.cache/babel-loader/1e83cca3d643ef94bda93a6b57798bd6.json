{"ast":null,"code":"var _jsxFileName = \"/home/milan/react-excercise/front/src/components/DataVisualization.js\",\n    _s = $RefreshSig$();\n\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport InputEmmiter from \"../services/InputEmmiter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst buttons = [{\n  value: \"Female\",\n  key: \"FMLE\"\n}, {\n  value: \"Male\",\n  key: \"MLE\"\n}, {\n  value: \"Both Genders\",\n  key: \"BTSX\"\n}, {\n  value: \"Compare\",\n  key: \"CMP\"\n}];\n\nconst formatRangeValues = data => {\n  const valuesArray = data.map(_ref => {\n    let {\n      TimeDimensionValue\n    } = _ref;\n    return TimeDimensionValue;\n  });\n  InputEmmiter.rangeMinMaxValues.next([Math.min(...valuesArray), Math.max(...valuesArray)]);\n};\n\nconst dataFilter = (key, data) => {\n  let series;\n  series = data === null || data === void 0 ? void 0 : data.filter(_ref2 => {\n    let {\n      Dim1\n    } = _ref2;\n    return Dim1 === key;\n  }).map(_ref3 => {\n    let {\n      TimeDimensionValue,\n      NumericValue\n    } = _ref3;\n    return [TimeDimensionValue, NumericValue];\n  }).sort((a, b) => {\n    return a[0] - b[0];\n  });\n  return series;\n};\n\nconst getMinYAxisValue = data => {\n  let extractedValues = [];\n  data.forEach(arr => {\n    extractedValues.push(arr[1]);\n  });\n  return Math.floor(Math.min(...extractedValues));\n};\n\nconst singleDataChartOptions = (gender, data) => {\n  let options = {\n    title: {\n      text: \"Blood Pressure index for population\"\n    }\n  };\n  const series = dataFilter(gender.key, data);\n  options = { ...options,\n    yAxis: {\n      min: null,\n      max: null\n    },\n    xAxis: {\n      reversed: false,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: `Blood pressure index ${gender.value}`\n      }\n    },\n    chart: {\n      type: \"line\"\n    },\n    series: {\n      name: gender.value,\n      data: series\n    }\n  };\n  return options;\n};\n\nconst comparisonChartOptions = data => {\n  let options = {\n    title: {\n      text: \"Blood Pressure index comparison by gender\"\n    }\n  };\n  const femaleSeries = dataFilter(\"FMLE\", data);\n  const maleSeries = dataFilter(\"MLE\", data);\n  maleSeries.forEach(s => {\n    s[1] = s[1] * -1;\n  });\n  const yAxisMinValue = getMinYAxisValue(maleSeries);\n  const yAxisMaxValue = yAxisMinValue * -1;\n  options = { ...options,\n    chart: {\n      type: \"bar\"\n    },\n    accessibility: {\n      point: {\n        valueDescriptionFormat: \"{index}. Age {xDescription}, {value}%.\"\n      }\n    },\n    xAxis: [{\n      reversed: false,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: \"Blood pressure index (female)\"\n      }\n    }, {\n      // mirror axis on right side\n      opposite: true,\n      reversed: false,\n      linkedTo: 0,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: \"Blood pressure index (male)\"\n      }\n    }],\n    yAxis: {\n      title: {\n        text: null\n      },\n      min: yAxisMinValue,\n      max: yAxisMaxValue,\n      labels: {\n        formatter: function () {\n          return Math.abs(this.value);\n        }\n      },\n      accessibility: {\n        description: \"Blood pressure index, comparison by gender in Serbia\"\n      }\n    },\n    plotOptions: {\n      series: {\n        stacking: \"normal\",\n        pointWidth: 5\n      }\n    },\n    tooltip: {\n      formatter: function () {\n        return \"<b>\" + this.series.name + \", year \" + this.point.category + \"</b><br/>\" + \"BP index: \" + Highcharts.numberFormat(Math.abs(this.point.y), 1);\n      }\n    },\n    series: [{\n      name: \"Male\",\n      data: maleSeries\n    }, {\n      name: \"Female\",\n      data: femaleSeries\n    }]\n  };\n  return options;\n};\n\nconst DataVisulization = _ref4 => {\n  _s();\n\n  let {\n    param\n  } = _ref4;\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n  const [rangeValues, setRangeValues] = useState([]);\n\n  const optionSetter = button => {\n    if (button.key !== \"CMP\") {\n      const options = singleDataChartOptions(button, data);\n      setChartOptions(options);\n    } else {\n      const options = comparisonChartOptions(data);\n      setChartOptions(options);\n    }\n  };\n\n  const rangeFilter = values => {\n    const filteredData = data === null || data === void 0 ? void 0 : data.filter(obj => obj.TimeDimensionValue > values[0]);\n    return filteredData;\n  };\n\n  useEffect(() => {\n    // let fetchedData;\n    let subscription;\n\n    const getData = async () => {\n      const data = await DataProvider.getData(param); // fetchedData = data;\n\n      setData(data); // set chart options for initial render\n\n      formatRangeValues(data); // subscription = InputEmmiter.rangeEmmiter.subscribe((values) => {\n      //   let options;\n      //   if (values.length > 0) {\n      //     const dataRange = data?.filter(\n      //       (obj) => obj.TimeDimensionValue > values[0]\n      //     );\n      //     setData(dataRange);\n      //     console.log(values);\n      //     options = singleDataChartOptions(buttons[0], dataRange);\n      //   } else {\n      //     options = singleDataChartOptions(buttons[0], data);\n      //   }\n      //   setChartOptions(options);\n      // });\n    };\n\n    getData();\n  }, [param]);\n  useEffect(() => {\n    const subscription = InputEmmiter.rangeEmmiter.subscribe(values => {\n      let options;\n      const dataRange = data === null || data === void 0 ? void 0 : data.filter(obj => obj.TimeDimensionValue > values[0]);\n      setData(dataRange);\n      console.log(values);\n      options = singleDataChartOptions(buttons[0], dataRange);\n      setChartOptions(options);\n    });\n    return () => subscription.unsubscribe();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [param.toUpperCase(), \" Graph\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), buttons.map(b => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          optionSetter(b);\n        },\n        children: b.value\n      }, b.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataVisulization, \"2iF342GsxGSWhlMlyJsl0eSio3c=\");\n\n_c = DataVisulization;\nexport default DataVisulization;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataVisulization\");","map":{"version":3,"sources":["/home/milan/react-excercise/front/src/components/DataVisualization.js"],"names":["HighchartsReact","Highcharts","useEffect","useState","DataProvider","InputEmmiter","buttons","value","key","formatRangeValues","data","valuesArray","map","TimeDimensionValue","rangeMinMaxValues","next","Math","min","max","dataFilter","series","filter","Dim1","NumericValue","sort","a","b","getMinYAxisValue","extractedValues","forEach","arr","push","floor","singleDataChartOptions","gender","options","title","text","yAxis","xAxis","reversed","labels","step","accessibility","description","chart","type","name","comparisonChartOptions","femaleSeries","maleSeries","s","yAxisMinValue","yAxisMaxValue","point","valueDescriptionFormat","opposite","linkedTo","formatter","abs","plotOptions","stacking","pointWidth","tooltip","category","numberFormat","y","DataVisulization","param","setData","chartOptions","setChartOptions","rangeValues","setRangeValues","optionSetter","button","rangeFilter","values","filteredData","obj","subscription","getData","rangeEmmiter","subscribe","dataRange","console","log","unsubscribe","toUpperCase"],"mappings":"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","sourcesContent":["import HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport InputEmmiter from \"../services/InputEmmiter\";\n\nconst buttons = [\n  { value: \"Female\", key: \"FMLE\" },\n  { value: \"Male\", key: \"MLE\" },\n  { value: \"Both Genders\", key: \"BTSX\" },\n  { value: \"Compare\", key: \"CMP\" },\n];\n\nconst formatRangeValues = (data) => {\n  const valuesArray = data.map(({ TimeDimensionValue }) => TimeDimensionValue);\n  InputEmmiter.rangeMinMaxValues.next([\n    Math.min(...valuesArray),\n    Math.max(...valuesArray),\n  ]);\n};\n\nconst dataFilter = (key, data) => {\n  let series;\n\n  series = data\n    ?.filter(({ Dim1 }) => Dim1 === key)\n    .map(({ TimeDimensionValue, NumericValue }) => [\n      TimeDimensionValue,\n      NumericValue,\n    ])\n    .sort((a, b) => {\n      return a[0] - b[0];\n    });\n\n  return series;\n};\n\nconst getMinYAxisValue = (data) => {\n  let extractedValues = [];\n  data.forEach((arr) => {\n    extractedValues.push(arr[1]);\n  });\n\n  return Math.floor(Math.min(...extractedValues));\n};\n\nconst singleDataChartOptions = (gender, data) => {\n  let options = {\n    title: { text: \"Blood Pressure index for population\" },\n  };\n  const series = dataFilter(gender.key, data);\n  options = {\n    ...options,\n    yAxis: {\n      min: null,\n      max: null,\n    },\n    xAxis: {\n      reversed: false,\n      labels: {\n        step: 1,\n      },\n      accessibility: {\n        description: `Blood pressure index ${gender.value}`,\n      },\n    },\n    chart: { type: \"line\" },\n    series: { name: gender.value, data: series },\n  };\n  return options;\n};\n\nconst comparisonChartOptions = (data) => {\n  let options = {\n    title: { text: \"Blood Pressure index comparison by gender\" },\n  };\n  const femaleSeries = dataFilter(\"FMLE\", data);\n  const maleSeries = dataFilter(\"MLE\", data);\n  maleSeries.forEach((s) => {\n    s[1] = s[1] * -1;\n  });\n\n  const yAxisMinValue = getMinYAxisValue(maleSeries);\n  const yAxisMaxValue = yAxisMinValue * -1;\n\n  options = {\n    ...options,\n    chart: {\n      type: \"bar\",\n    },\n    accessibility: {\n      point: {\n        valueDescriptionFormat: \"{index}. Age {xDescription}, {value}%.\",\n      },\n    },\n    xAxis: [\n      {\n        reversed: false,\n        labels: {\n          step: 1,\n        },\n        accessibility: {\n          description: \"Blood pressure index (female)\",\n        },\n      },\n      {\n        // mirror axis on right side\n        opposite: true,\n        reversed: false,\n        linkedTo: 0,\n        labels: {\n          step: 1,\n        },\n        accessibility: {\n          description: \"Blood pressure index (male)\",\n        },\n      },\n    ],\n    yAxis: {\n      title: {\n        text: null,\n      },\n      min: yAxisMinValue,\n      max: yAxisMaxValue,\n      labels: {\n        formatter: function () {\n          return Math.abs(this.value);\n        },\n      },\n      accessibility: {\n        description: \"Blood pressure index, comparison by gender in Serbia\",\n      },\n    },\n    plotOptions: {\n      series: {\n        stacking: \"normal\",\n        pointWidth: 5,\n      },\n    },\n    tooltip: {\n      formatter: function () {\n        return (\n          \"<b>\" +\n          this.series.name +\n          \", year \" +\n          this.point.category +\n          \"</b><br/>\" +\n          \"BP index: \" +\n          Highcharts.numberFormat(Math.abs(this.point.y), 1)\n        );\n      },\n    },\n    series: [\n      {\n        name: \"Male\",\n        data: maleSeries,\n      },\n      {\n        name: \"Female\",\n        data: femaleSeries,\n      },\n    ],\n  };\n  return options;\n};\n\nconst DataVisulization = ({ param }) => {\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n  const [rangeValues, setRangeValues] = useState([]);\n\n  const optionSetter = (button) => {\n    if (button.key !== \"CMP\") {\n      const options = singleDataChartOptions(button, data);\n      setChartOptions(options);\n    } else {\n      const options = comparisonChartOptions(data);\n      setChartOptions(options);\n    }\n  };\n\n  const rangeFilter = (values) => {\n    const filteredData = data?.filter(\n      (obj) => obj.TimeDimensionValue > values[0]\n    );\n    return filteredData;\n  };\n\n  useEffect(() => {\n    // let fetchedData;\n    let subscription;\n    const getData = async () => {\n      const data = await DataProvider.getData(param);\n      // fetchedData = data;\n      setData(data);\n      // set chart options for initial render\n\n      formatRangeValues(data);\n      // subscription = InputEmmiter.rangeEmmiter.subscribe((values) => {\n      //   let options;\n      //   if (values.length > 0) {\n      //     const dataRange = data?.filter(\n      //       (obj) => obj.TimeDimensionValue > values[0]\n      //     );\n      //     setData(dataRange);\n      //     console.log(values);\n      //     options = singleDataChartOptions(buttons[0], dataRange);\n      //   } else {\n      //     options = singleDataChartOptions(buttons[0], data);\n      //   }\n\n      //   setChartOptions(options);\n      // });\n    };\n\n    getData();\n  }, [param]);\n\n  useEffect(() => {\n    const subscription = InputEmmiter.rangeEmmiter.subscribe((values) => {\n      let options;\n      const dataRange = data?.filter(\n        (obj) => obj.TimeDimensionValue > values[0]\n      );\n      setData(dataRange);\n      console.log(values);\n      options = singleDataChartOptions(buttons[0], dataRange);\n      setChartOptions(options);\n    });\n    return () => subscription.unsubscribe();\n  }, [data]);\n\n  return (\n    <div>\n      <h2>{param.toUpperCase()} Graph</h2>\n      {buttons.map((b) => {\n        return (\n          <button\n            onClick={() => {\n              optionSetter(b);\n            }}\n            key={b.key}\n          >\n            {b.value}\n          </button>\n        );\n      })}\n      <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n    </div>\n  );\n};\n\nexport default DataVisulization;\n"]},"metadata":{},"sourceType":"module"}