{"ast":null,"code":"var _jsxFileName = \"/home/milan/react-excercise/front/src/components/Serbia.js\",\n    _s = $RefreshSig$();\n\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport { filter } from \"rxjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst buttons = [{\n  value: \"Female\",\n  key: \"FMLE\"\n}, {\n  value: \"Male\",\n  key: \"MLE\"\n}, {\n  value: \"Both Genders\",\n  key: \"BTSX\"\n}, {\n  value: \"Compare\",\n  key: \"CMP\"\n}];\n\nconst dataFilter = (gender, data) => {\n  let options = {\n    title: {\n      text: \"Blood Pressure index for Serbia population\"\n    }\n  };\n  let series;\n  series = data === null || data === void 0 ? void 0 : data.filter(_ref => {\n    let {\n      Dim1\n    } = _ref;\n    return Dim1 === gender.key;\n  }).map(_ref2 => {\n    let {\n      TimeDimensionValue,\n      NumericValue\n    } = _ref2;\n    return [parseInt(TimeDimensionValue), NumericValue];\n  }).sort((a, b) => {\n    return a[0] - b[0];\n  });\n  options = { ...options,\n    chart: {},\n    series: {\n      name: gender.value,\n      data: series\n    }\n  };\n  return series;\n};\n\nconst comparisonChartOptions = data => {};\n\nconst SerbiaData = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n\n  const optionSetter = button => {\n    let options;\n\n    if (button.key !== \"CMP\") {\n      const series = dataFilter(button, data);\n      options = { ...options,\n        chart: {},\n        series: {\n          name: button.value,\n          data: series\n        }\n      };\n      setChartOptions(options);\n    }\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getSerbiaData();\n      setData(data); // set chart options for initial render\n\n      const options = dataFilter(buttons[0], data);\n      setChartOptions(options);\n    };\n\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Serbia Graph here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), buttons.map(b => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          optionSetter(b);\n        },\n        children: b.value\n      }, b.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SerbiaData, \"OVygtphRWzNllYnsxHhWMJZdwWs=\");\n\n_c = SerbiaData;\nexport default SerbiaData; // const defineComparisonChart = () => {\n//   let options = {\n//     title: { text: \"Blood Pressure index comparison for Serbia population\" },\n//   };\n//   let series = [];\n//   const maleData = data\n//     .filter(({ Dim1 }) => Dim1 === \"MLE\")\n//     .map(({ TimeDimensionValue, NumericValue }) => [\n//       parseInt(TimeDimensionValue * -1),\n//       NumericValue,\n//     ])\n//     .sort((a, b) => {\n//       return a[0] - b[0];\n//     });\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"SerbiaData\");","map":{"version":3,"sources":["/home/milan/react-excercise/front/src/components/Serbia.js"],"names":["HighchartsReact","Highcharts","useCallback","useEffect","useState","DataProvider","filter","buttons","value","key","dataFilter","gender","data","options","title","text","series","Dim1","map","TimeDimensionValue","NumericValue","parseInt","sort","a","b","chart","name","comparisonChartOptions","SerbiaData","setData","chartOptions","setChartOptions","optionSetter","button","getData","getSerbiaData"],"mappings":"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","sourcesContent":["import HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport { filter } from \"rxjs\";\n\nconst buttons = [\n  { value: \"Female\", key: \"FMLE\" },\n  { value: \"Male\", key: \"MLE\" },\n  { value: \"Both Genders\", key: \"BTSX\" },\n  { value: \"Compare\", key: \"CMP\" },\n];\n\nconst dataFilter = (gender, data) => {\n  let options = {\n    title: { text: \"Blood Pressure index for Serbia population\" },\n  };\n  let series;\n\n  series = data\n    ?.filter(({ Dim1 }) => Dim1 === gender.key)\n    .map(({ TimeDimensionValue, NumericValue }) => [\n      parseInt(TimeDimensionValue),\n      NumericValue,\n    ])\n    .sort((a, b) => {\n      return a[0] - b[0];\n    });\n  options = {\n    ...options,\n    chart: {},\n    series: { name: gender.value, data: series },\n  };\n\n  return series;\n};\n\nconst comparisonChartOptions = (data) => {};\n\nconst SerbiaData = () => {\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n\n  const optionSetter = (button) => {\n    let options;\n    if (button.key !== \"CMP\") {\n      const series = dataFilter(button, data);\n      options = {\n        ...options,\n        chart: {},\n        series: { name: button.value, data: series },\n      };\n      setChartOptions(options);\n    }\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getSerbiaData();\n      setData(data);\n      // set chart options for initial render\n      const options = dataFilter(buttons[0], data);\n      setChartOptions(options);\n    };\n    getData();\n  }, []);\n\n  return (\n    <div>\n      <h2>Serbia Graph here</h2>\n      {buttons.map((b) => {\n        return (\n          <button\n            onClick={() => {\n              optionSetter(b);\n            }}\n            key={b.key}\n          >\n            {b.value}\n          </button>\n        );\n      })}\n      <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n    </div>\n  );\n};\n\nexport default SerbiaData;\n\n// const defineComparisonChart = () => {\n//   let options = {\n//     title: { text: \"Blood Pressure index comparison for Serbia population\" },\n//   };\n//   let series = [];\n//   const maleData = data\n//     .filter(({ Dim1 }) => Dim1 === \"MLE\")\n//     .map(({ TimeDimensionValue, NumericValue }) => [\n//       parseInt(TimeDimensionValue * -1),\n//       NumericValue,\n//     ])\n//     .sort((a, b) => {\n//       return a[0] - b[0];\n//     });\n// };\n"]},"metadata":{},"sourceType":"module"}