{"ast":null,"code":"var _jsxFileName = \"/home/milan/react-excercise/front/src/components/DataVisualization.js\",\n    _s = $RefreshSig$();\n\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport { filter } from \"rxjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst buttons = [{\n  value: \"Female\",\n  key: \"FMLE\"\n}, {\n  value: \"Male\",\n  key: \"MLE\"\n}, {\n  value: \"Both Genders\",\n  key: \"BTSX\"\n}, {\n  value: \"Compare\",\n  key: \"CMP\"\n}];\n\nconst dataFilter = (key, data) => {\n  let series;\n  series = data === null || data === void 0 ? void 0 : data.filter(_ref => {\n    let {\n      Dim1\n    } = _ref;\n    return Dim1 === key;\n  }).map(_ref2 => {\n    let {\n      TimeDimensionValue,\n      NumericValue\n    } = _ref2;\n    return [parseInt(TimeDimensionValue), NumericValue];\n  }).sort((a, b) => {\n    return a[0] - b[0];\n  });\n  return series;\n};\n\nconst getMinYAxisValue = data => {\n  let extractedValues = [];\n  data.forEach(arr => {\n    extractedValues.push(arr[1]);\n    console.log(data);\n  });\n  console.log(Math.max(...extractedValues));\n  return Math.max(extractedValues);\n};\n\nconst singleDataChartOptions = (gender, data) => {\n  let options = {\n    title: {\n      text: \"Blood Pressure index for population\"\n    }\n  };\n  const series = dataFilter(gender.key, data);\n  options = { ...options,\n    yAxis: {\n      min: null\n    },\n    xAxis: {\n      reversed: false,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: `Blood pressure index ${gender.value}`\n      }\n    },\n    chart: {\n      type: \"line\"\n    },\n    series: {\n      name: gender.value,\n      data: series\n    }\n  };\n  return options;\n};\n\nconst comparisonChartOptions = data => {\n  let options = {\n    title: {\n      text: \"Blood Pressure index comparison by gender\"\n    }\n  };\n  const femaleSeries = dataFilter(\"FMLE\", data);\n  let maleSeries = dataFilter(\"MLE\", data);\n  const yAxisValue = getMinYAxisValue(maleSeries);\n  const negativeMaleSeries = maleSeries.forEach(s => {\n    s[1] = s[1] * -1;\n  });\n  options = { ...options,\n    chart: {\n      type: \"bar\"\n    },\n    accessibility: {\n      point: {\n        valueDescriptionFormat: \"{index}. Age {xDescription}, {value}%.\"\n      }\n    },\n    xAxis: [{\n      reversed: false,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: \"Blood pressure index (female)\"\n      }\n    }, {\n      // mirror axis on right side\n      opposite: true,\n      reversed: false,\n      linkedTo: 0,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: \"Blood pressure index (male)\"\n      }\n    }],\n    yAxis: {\n      title: {\n        text: null\n      },\n      min: yAxisValue,\n      labels: {\n        formatter: function () {\n          return Math.abs(this.value);\n        }\n      },\n      accessibility: {\n        description: \"Blood pressure index, comparison by gender in Serbia\"\n      }\n    },\n    plotOptions: {\n      series: {\n        stacking: \"normal\",\n        pointWidth: 5\n      }\n    },\n    tooltip: {\n      formatter: function () {\n        return \"<b>\" + this.series.name + \", year \" + this.point.category + \"</b><br/>\" + \"BP index: \" + Highcharts.numberFormat(Math.abs(this.point.y), 1);\n      }\n    },\n    series: [{\n      name: \"Male\",\n      data: negativeMaleSeries\n    }, {\n      name: \"Female\",\n      data: femaleSeries\n    }]\n  };\n  return options;\n};\n\nconst DataVisulization = _ref3 => {\n  _s();\n\n  let {\n    param\n  } = _ref3;\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n\n  const optionSetter = button => {\n    if (button.key !== \"CMP\") {\n      const options = singleDataChartOptions(button, data);\n      setChartOptions(options);\n    } else {\n      const options = comparisonChartOptions(data);\n      setChartOptions(options);\n    }\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getData(param);\n      setData(data); // set chart options for initial render\n\n      const options = singleDataChartOptions(buttons[0], data);\n      setChartOptions(options);\n    };\n\n    getData();\n  }, [param]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [param.toUpperCase(), \" Graph\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), buttons.map(b => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          optionSetter(b);\n        },\n        children: b.value\n      }, b.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataVisulization, \"OVygtphRWzNllYnsxHhWMJZdwWs=\");\n\n_c = DataVisulization;\nexport default DataVisulization;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataVisulization\");","map":{"version":3,"sources":["/home/milan/react-excercise/front/src/components/DataVisualization.js"],"names":["HighchartsReact","Highcharts","useCallback","useEffect","useState","DataProvider","filter","buttons","value","key","dataFilter","data","series","Dim1","map","TimeDimensionValue","NumericValue","parseInt","sort","a","b","getMinYAxisValue","extractedValues","forEach","arr","push","console","log","Math","max","singleDataChartOptions","gender","options","title","text","yAxis","min","xAxis","reversed","labels","step","accessibility","description","chart","type","name","comparisonChartOptions","femaleSeries","maleSeries","yAxisValue","negativeMaleSeries","s","point","valueDescriptionFormat","opposite","linkedTo","formatter","abs","plotOptions","stacking","pointWidth","tooltip","category","numberFormat","y","DataVisulization","param","setData","chartOptions","setChartOptions","optionSetter","button","getData","toUpperCase"],"mappings":";;;AAAA,OAAOA,eAAP,MAA4B,2BAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAASC,MAAT,QAAuB,MAAvB;;AAEA,MAAMC,OAAO,GAAG,CACd;AAAEC,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,GAAG,EAAE;AAAxB,CADc,EAEd;AAAED,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,GAAG,EAAE;AAAtB,CAFc,EAGd;AAAED,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,GAAG,EAAE;AAA9B,CAHc,EAId;AAAED,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,GAAG,EAAE;AAAzB,CAJc,CAAhB;;AAOA,MAAMC,UAAU,GAAG,CAACD,GAAD,EAAME,IAAN,KAAe;AAChC,MAAIC,MAAJ;AAEAA,EAAAA,MAAM,GAAGD,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CACTL,MADK,CACE;AAAA,QAAC;AAAEO,MAAAA;AAAF,KAAD;AAAA,WAAcA,IAAI,KAAKJ,GAAvB;AAAA,GADF,EAENK,GAFM,CAEF;AAAA,QAAC;AAAEC,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,KAAD;AAAA,WAA0C,CAC7CC,QAAQ,CAACF,kBAAD,CADqC,EAE7CC,YAF6C,CAA1C;AAAA,GAFE,EAMNE,IANM,CAMD,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd,WAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACD,GARM,CAAT;AAUA,SAAOR,MAAP;AACD,CAdD;;AAgBA,MAAMS,gBAAgB,GAAIV,IAAD,IAAU;AACjC,MAAIW,eAAe,GAAG,EAAtB;AACAX,EAAAA,IAAI,CAACY,OAAL,CAAcC,GAAD,IAAS;AACpBF,IAAAA,eAAe,CAACG,IAAhB,CAAqBD,GAAG,CAAC,CAAD,CAAxB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AACD,GAHD;AAIAe,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,GAAL,CAAS,GAAGP,eAAZ,CAAZ;AACA,SAAOM,IAAI,CAACC,GAAL,CAASP,eAAT,CAAP;AACD,CARD;;AAUA,MAAMQ,sBAAsB,GAAG,CAACC,MAAD,EAASpB,IAAT,KAAkB;AAC/C,MAAIqB,OAAO,GAAG;AACZC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AADK,GAAd;AAGA,QAAMtB,MAAM,GAAGF,UAAU,CAACqB,MAAM,CAACtB,GAAR,EAAaE,IAAb,CAAzB;AACAqB,EAAAA,OAAO,GAAG,EACR,GAAGA,OADK;AAERG,IAAAA,KAAK,EAAE;AACLC,MAAAA,GAAG,EAAE;AADA,KAFC;AAKRC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,KADL;AAELC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE;AADA,OAFH;AAKLC,MAAAA,aAAa,EAAE;AACbC,QAAAA,WAAW,EAAG,wBAAuBX,MAAM,CAACvB,KAAM;AADrC;AALV,KALC;AAcRmC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAdC;AAeRhC,IAAAA,MAAM,EAAE;AAAEiC,MAAAA,IAAI,EAAEd,MAAM,CAACvB,KAAf;AAAsBG,MAAAA,IAAI,EAAEC;AAA5B;AAfA,GAAV;AAiBA,SAAOoB,OAAP;AACD,CAvBD;;AAyBA,MAAMc,sBAAsB,GAAInC,IAAD,IAAU;AACvC,MAAIqB,OAAO,GAAG;AACZC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AADK,GAAd;AAGA,QAAMa,YAAY,GAAGrC,UAAU,CAAC,MAAD,EAASC,IAAT,CAA/B;AACA,MAAIqC,UAAU,GAAGtC,UAAU,CAAC,KAAD,EAAQC,IAAR,CAA3B;AACA,QAAMsC,UAAU,GAAG5B,gBAAgB,CAAC2B,UAAD,CAAnC;AACA,QAAME,kBAAkB,GAAGF,UAAU,CAACzB,OAAX,CAAoB4B,CAAD,IAAO;AACnDA,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAf;AACD,GAF0B,CAA3B;AAIAnB,EAAAA,OAAO,GAAG,EACR,GAAGA,OADK;AAERW,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AADD,KAFC;AAKRH,IAAAA,aAAa,EAAE;AACbW,MAAAA,KAAK,EAAE;AACLC,QAAAA,sBAAsB,EAAE;AADnB;AADM,KALP;AAURhB,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,QAAQ,EAAE,KADZ;AAEEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE;AADA,OAFV;AAKEC,MAAAA,aAAa,EAAE;AACbC,QAAAA,WAAW,EAAE;AADA;AALjB,KADK,EAUL;AACE;AACAY,MAAAA,QAAQ,EAAE,IAFZ;AAGEhB,MAAAA,QAAQ,EAAE,KAHZ;AAIEiB,MAAAA,QAAQ,EAAE,CAJZ;AAKEhB,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE;AADA,OALV;AAQEC,MAAAA,aAAa,EAAE;AACbC,QAAAA,WAAW,EAAE;AADA;AARjB,KAVK,CAVC;AAiCRP,IAAAA,KAAK,EAAE;AACLF,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE;AADD,OADF;AAILE,MAAAA,GAAG,EAAEa,UAJA;AAKLV,MAAAA,MAAM,EAAE;AACNiB,QAAAA,SAAS,EAAE,YAAY;AACrB,iBAAO5B,IAAI,CAAC6B,GAAL,CAAS,KAAKjD,KAAd,CAAP;AACD;AAHK,OALH;AAULiC,MAAAA,aAAa,EAAE;AACbC,QAAAA,WAAW,EAAE;AADA;AAVV,KAjCC;AA+CRgB,IAAAA,WAAW,EAAE;AACX9C,MAAAA,MAAM,EAAE;AACN+C,QAAAA,QAAQ,EAAE,QADJ;AAENC,QAAAA,UAAU,EAAE;AAFN;AADG,KA/CL;AAqDRC,IAAAA,OAAO,EAAE;AACPL,MAAAA,SAAS,EAAE,YAAY;AACrB,eACE,QACA,KAAK5C,MAAL,CAAYiC,IADZ,GAEA,SAFA,GAGA,KAAKO,KAAL,CAAWU,QAHX,GAIA,WAJA,GAKA,YALA,GAMA7D,UAAU,CAAC8D,YAAX,CAAwBnC,IAAI,CAAC6B,GAAL,CAAS,KAAKL,KAAL,CAAWY,CAApB,CAAxB,EAAgD,CAAhD,CAPF;AASD;AAXM,KArDD;AAkERpD,IAAAA,MAAM,EAAE,CACN;AACEiC,MAAAA,IAAI,EAAE,MADR;AAEElC,MAAAA,IAAI,EAAEuC;AAFR,KADM,EAKN;AACEL,MAAAA,IAAI,EAAE,QADR;AAEElC,MAAAA,IAAI,EAAEoC;AAFR,KALM;AAlEA,GAAV;AA6EA,SAAOf,OAAP;AACD,CAzFD;;AA2FA,MAAMiC,gBAAgB,GAAG,SAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACtC,QAAM,CAACvD,IAAD,EAAOwD,OAAP,IAAkB/D,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACgE,YAAD,EAAeC,eAAf,IAAkCjE,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMkE,YAAY,GAAIC,MAAD,IAAY;AAC/B,QAAIA,MAAM,CAAC9D,GAAP,KAAe,KAAnB,EAA0B;AACxB,YAAMuB,OAAO,GAAGF,sBAAsB,CAACyC,MAAD,EAAS5D,IAAT,CAAtC;AACA0D,MAAAA,eAAe,CAACrC,OAAD,CAAf;AACD,KAHD,MAGO;AACL,YAAMA,OAAO,GAAGc,sBAAsB,CAACnC,IAAD,CAAtC;AACA0D,MAAAA,eAAe,CAACrC,OAAD,CAAf;AACD;AACF,GARD;;AAUA7B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqE,OAAO,GAAG,YAAY;AAC1B,YAAM7D,IAAI,GAAG,MAAMN,YAAY,CAACmE,OAAb,CAAqBN,KAArB,CAAnB;AACAC,MAAAA,OAAO,CAACxD,IAAD,CAAP,CAF0B,CAG1B;;AACA,YAAMqB,OAAO,GAAGF,sBAAsB,CAACvB,OAAO,CAAC,CAAD,CAAR,EAAaI,IAAb,CAAtC;AACA0D,MAAAA,eAAe,CAACrC,OAAD,CAAf;AACD,KAND;;AAOAwC,IAAAA,OAAO;AACR,GATQ,EASN,CAACN,KAAD,CATM,CAAT;AAWA,sBACE;AAAA,4BACE;AAAA,iBAAKA,KAAK,CAACO,WAAN,EAAL;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGlE,OAAO,CAACO,GAAR,CAAaM,CAAD,IAAO;AAClB,0BACE;AACE,QAAA,OAAO,EAAE,MAAM;AACbkD,UAAAA,YAAY,CAAClD,CAAD,CAAZ;AACD,SAHH;AAAA,kBAMGA,CAAC,CAACZ;AANL,SAIOY,CAAC,CAACX,GAJT;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,KAXA,CAFH,eAcE,QAAC,eAAD;AAAiB,MAAA,UAAU,EAAER,UAA7B;AAAyC,MAAA,OAAO,EAAEmE;AAAlD;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA3CD;;GAAMH,gB;;KAAAA,gB;AA6CN,eAAeA,gBAAf","sourcesContent":["import HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport { filter } from \"rxjs\";\n\nconst buttons = [\n  { value: \"Female\", key: \"FMLE\" },\n  { value: \"Male\", key: \"MLE\" },\n  { value: \"Both Genders\", key: \"BTSX\" },\n  { value: \"Compare\", key: \"CMP\" },\n];\n\nconst dataFilter = (key, data) => {\n  let series;\n\n  series = data\n    ?.filter(({ Dim1 }) => Dim1 === key)\n    .map(({ TimeDimensionValue, NumericValue }) => [\n      parseInt(TimeDimensionValue),\n      NumericValue,\n    ])\n    .sort((a, b) => {\n      return a[0] - b[0];\n    });\n\n  return series;\n};\n\nconst getMinYAxisValue = (data) => {\n  let extractedValues = [];\n  data.forEach((arr) => {\n    extractedValues.push(arr[1]);\n    console.log(data);\n  });\n  console.log(Math.max(...extractedValues));\n  return Math.max(extractedValues);\n};\n\nconst singleDataChartOptions = (gender, data) => {\n  let options = {\n    title: { text: \"Blood Pressure index for population\" },\n  };\n  const series = dataFilter(gender.key, data);\n  options = {\n    ...options,\n    yAxis: {\n      min: null,\n    },\n    xAxis: {\n      reversed: false,\n      labels: {\n        step: 1,\n      },\n      accessibility: {\n        description: `Blood pressure index ${gender.value}`,\n      },\n    },\n    chart: { type: \"line\" },\n    series: { name: gender.value, data: series },\n  };\n  return options;\n};\n\nconst comparisonChartOptions = (data) => {\n  let options = {\n    title: { text: \"Blood Pressure index comparison by gender\" },\n  };\n  const femaleSeries = dataFilter(\"FMLE\", data);\n  let maleSeries = dataFilter(\"MLE\", data);\n  const yAxisValue = getMinYAxisValue(maleSeries);\n  const negativeMaleSeries = maleSeries.forEach((s) => {\n    s[1] = s[1] * -1;\n  });\n\n  options = {\n    ...options,\n    chart: {\n      type: \"bar\",\n    },\n    accessibility: {\n      point: {\n        valueDescriptionFormat: \"{index}. Age {xDescription}, {value}%.\",\n      },\n    },\n    xAxis: [\n      {\n        reversed: false,\n        labels: {\n          step: 1,\n        },\n        accessibility: {\n          description: \"Blood pressure index (female)\",\n        },\n      },\n      {\n        // mirror axis on right side\n        opposite: true,\n        reversed: false,\n        linkedTo: 0,\n        labels: {\n          step: 1,\n        },\n        accessibility: {\n          description: \"Blood pressure index (male)\",\n        },\n      },\n    ],\n    yAxis: {\n      title: {\n        text: null,\n      },\n      min: yAxisValue,\n      labels: {\n        formatter: function () {\n          return Math.abs(this.value);\n        },\n      },\n      accessibility: {\n        description: \"Blood pressure index, comparison by gender in Serbia\",\n      },\n    },\n    plotOptions: {\n      series: {\n        stacking: \"normal\",\n        pointWidth: 5,\n      },\n    },\n    tooltip: {\n      formatter: function () {\n        return (\n          \"<b>\" +\n          this.series.name +\n          \", year \" +\n          this.point.category +\n          \"</b><br/>\" +\n          \"BP index: \" +\n          Highcharts.numberFormat(Math.abs(this.point.y), 1)\n        );\n      },\n    },\n    series: [\n      {\n        name: \"Male\",\n        data: negativeMaleSeries,\n      },\n      {\n        name: \"Female\",\n        data: femaleSeries,\n      },\n    ],\n  };\n  return options;\n};\n\nconst DataVisulization = ({ param }) => {\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n\n  const optionSetter = (button) => {\n    if (button.key !== \"CMP\") {\n      const options = singleDataChartOptions(button, data);\n      setChartOptions(options);\n    } else {\n      const options = comparisonChartOptions(data);\n      setChartOptions(options);\n    }\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getData(param);\n      setData(data);\n      // set chart options for initial render\n      const options = singleDataChartOptions(buttons[0], data);\n      setChartOptions(options);\n    };\n    getData();\n  }, [param]);\n\n  return (\n    <div>\n      <h2>{param.toUpperCase()} Graph</h2>\n      {buttons.map((b) => {\n        return (\n          <button\n            onClick={() => {\n              optionSetter(b);\n            }}\n            key={b.key}\n          >\n            {b.value}\n          </button>\n        );\n      })}\n      <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n    </div>\n  );\n};\n\nexport default DataVisulization;\n"]},"metadata":{},"sourceType":"module"}