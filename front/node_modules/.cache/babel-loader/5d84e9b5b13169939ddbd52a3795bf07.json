{"ast":null,"code":"var _jsxFileName = \"/home/milan/react-excercise/front/src/components/Serbia.js\",\n    _s = $RefreshSig$();\n\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SerbiaData = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n  const buttons = [{\n    value: \"Female\",\n    key: \"FMLE\"\n  }, {\n    value: \"Male\",\n    key: \"MLE\"\n  }, {\n    value: \"Both Genders\",\n    key: \"BTSX\"\n  }, {\n    value: \"Compare\",\n    key: \"CMP\"\n  }]; //TODO reformat to avoid boilerplate\n\n  const dataFilter = (data, gender) => {\n    let options = {\n      title: {\n        text: \"Blood Pressure index for Serbia population\"\n      }\n    };\n    let series;\n\n    switch (gender) {\n      case \"Both\":\n        series = data.filter(_ref => {\n          let {\n            Dim1\n          } = _ref;\n          return Dim1 === \"BTSX\";\n        }).map(_ref2 => {\n          let {\n            TimeDimensionValue,\n            NumericValue\n          } = _ref2;\n          return [parseInt(TimeDimensionValue), NumericValue];\n        });\n        options = { ...options,\n          chart: {\n            type: \"line\"\n          },\n          series: {\n            name: \"Both Genders\",\n            data: series\n          }\n        };\n        break;\n\n      case \"Female\":\n        series = data.filter(_ref3 => {\n          let {\n            Dim1\n          } = _ref3;\n          return Dim1 === \"FMLE\";\n        }).map(_ref4 => {\n          let {\n            TimeDimensionValue,\n            NumericValue\n          } = _ref4;\n          return [parseInt(TimeDimensionValue), NumericValue];\n        });\n        options = { ...options,\n          chart: {\n            type: \"line\"\n          },\n          series: {\n            name: \"Female Population\",\n            data: series\n          }\n        };\n        break;\n\n      case \"Male\":\n        series = data.filter(_ref5 => {\n          let {\n            Dim1\n          } = _ref5;\n          return Dim1 === \"MLE\";\n        }).map(_ref6 => {\n          let {\n            TimeDimensionValue,\n            NumericValue\n          } = _ref6;\n          return [parseInt(TimeDimensionValue), NumericValue];\n        });\n        options = { ...options,\n          series: {\n            name: \"Male Population\",\n            data: series\n          }\n        };\n        break;\n\n      case \"Compare\":\n        const maleData = data.filter(_ref7 => {\n          let {\n            Dim1\n          } = _ref7;\n          return Dim1 === \"MLE\";\n        }).map(_ref8 => {\n          let {\n            TimeDimensionValue,\n            NumericValue\n          } = _ref8;\n          return [parseInt(TimeDimensionValue), NumericValue];\n        });\n        const femaleData = data.filter(_ref9 => {\n          let {\n            Dim1\n          } = _ref9;\n          return Dim1 === \"FMLE\";\n        }).map(_ref10 => {\n          let {\n            TimeDimensionValue,\n            NumericValue\n          } = _ref10;\n          return [parseInt(TimeDimensionValue), NumericValue];\n        });\n        console.log(maleData);\n        options = {\n          chart: {\n            type: \"bar\"\n          },\n          xAxis: [{\n            // categoties: categories,\n            reversed: false,\n            labels: {\n              step: 1\n            }\n          }, {\n            // categories: categories,\n            opposite: true,\n            // reversed: false,\n            linkedTo: 0,\n            labels: {\n              step: 1\n            }\n          }],\n          series: [{\n            name: \"Female\",\n            data: femaleData\n          }, {\n            name: \"Male\",\n            data: maleData\n          }],\n          plotOptions: {\n            series: {\n              stacking: \"normal\"\n            }\n          }\n        };\n        break;\n    }\n\n    setChartOptions(options);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getSerbiaData();\n      setData(data);\n      dataFilter(data, \"Both\");\n    };\n\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Serbia Graph here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), buttons.map((b, index) => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          dataFilter(data, b);\n        },\n        children: b.value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SerbiaData, \"OVygtphRWzNllYnsxHhWMJZdwWs=\");\n\n_c = SerbiaData;\nexport default SerbiaData;\n\nvar _c;\n\n$RefreshReg$(_c, \"SerbiaData\");","map":{"version":3,"sources":["/home/milan/react-excercise/front/src/components/Serbia.js"],"names":["HighchartsReact","Highcharts","useEffect","useState","DataProvider","SerbiaData","data","setData","chartOptions","setChartOptions","buttons","value","key","dataFilter","gender","options","title","text","series","filter","Dim1","map","TimeDimensionValue","NumericValue","parseInt","chart","type","name","maleData","femaleData","console","log","xAxis","reversed","labels","step","opposite","linkedTo","plotOptions","stacking","getData","getSerbiaData","b","index"],"mappings":"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","sourcesContent":["import HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\n\nconst SerbiaData = () => {\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n  const buttons = [\n    { value: \"Female\", key: \"FMLE\" },\n    { value: \"Male\", key: \"MLE\" },\n    { value: \"Both Genders\", key: \"BTSX\" },\n    { value: \"Compare\", key: \"CMP\" },\n  ];\n  //TODO reformat to avoid boilerplate\n  const dataFilter = (data, gender) => {\n    let options = {\n      title: { text: \"Blood Pressure index for Serbia population\" },\n    };\n    let series;\n\n    switch (gender) {\n      case \"Both\":\n        series = data\n          .filter(({ Dim1 }) => Dim1 === \"BTSX\")\n          .map(({ TimeDimensionValue, NumericValue }) => [\n            parseInt(TimeDimensionValue),\n            NumericValue,\n          ]);\n        options = {\n          ...options,\n          chart: {\n            type: \"line\",\n          },\n          series: { name: \"Both Genders\", data: series },\n        };\n        break;\n      case \"Female\":\n        series = data\n          .filter(({ Dim1 }) => Dim1 === \"FMLE\")\n          .map(({ TimeDimensionValue, NumericValue }) => [\n            parseInt(TimeDimensionValue),\n            NumericValue,\n          ]);\n        options = {\n          ...options,\n          chart: {\n            type: \"line\",\n          },\n          series: { name: \"Female Population\", data: series },\n        };\n        break;\n      case \"Male\":\n        series = data\n          .filter(({ Dim1 }) => Dim1 === \"MLE\")\n          .map(({ TimeDimensionValue, NumericValue }) => [\n            parseInt(TimeDimensionValue),\n            NumericValue,\n          ]);\n        options = {\n          ...options,\n          series: { name: \"Male Population\", data: series },\n        };\n        break;\n      case \"Compare\":\n        const maleData = data\n          .filter(({ Dim1 }) => Dim1 === \"MLE\")\n          .map(({ TimeDimensionValue, NumericValue }) => [\n            parseInt(TimeDimensionValue),\n            NumericValue,\n          ]);\n        const femaleData = data\n          .filter(({ Dim1 }) => Dim1 === \"FMLE\")\n          .map(({ TimeDimensionValue, NumericValue }) => [\n            parseInt(TimeDimensionValue),\n            NumericValue,\n          ]);\n\n        console.log(maleData);\n\n        options = {\n          chart: {\n            type: \"bar\",\n          },\n          xAxis: [\n            {\n              // categoties: categories,\n              reversed: false,\n              labels: {\n                step: 1,\n              },\n            },\n            {\n              // categories: categories,\n              opposite: true,\n              // reversed: false,\n              linkedTo: 0,\n              labels: {\n                step: 1,\n              },\n            },\n          ],\n          series: [\n            {\n              name: \"Female\",\n              data: femaleData,\n            },\n            {\n              name: \"Male\",\n              data: maleData,\n            },\n          ],\n          plotOptions: {\n            series: {\n              stacking: \"normal\",\n            },\n          },\n        };\n        break;\n    }\n    setChartOptions(options);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getSerbiaData();\n      setData(data);\n\n      dataFilter(data, \"Both\");\n    };\n    getData();\n  }, []);\n  return (\n    <div>\n      <h2>Serbia Graph here</h2>\n      {buttons.map((b, index) => {\n        return (\n          <button\n            onClick={() => {\n              dataFilter(data, b);\n            }}\n            key={index}\n          >\n            {b.value}\n          </button>\n        );\n      })}\n      <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n    </div>\n  );\n};\n\nexport default SerbiaData;\n"]},"metadata":{},"sourceType":"module"}