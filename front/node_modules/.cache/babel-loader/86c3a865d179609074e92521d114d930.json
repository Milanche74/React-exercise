{"ast":null,"code":"var _jsxFileName = \"/home/milan/react-excercise/front/src/components/Serbia.js\",\n    _s = $RefreshSig$();\n\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport { filter } from \"rxjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst buttons = [{\n  value: \"Female\",\n  key: \"FMLE\"\n}, {\n  value: \"Male\",\n  key: \"MLE\"\n}, {\n  value: \"Both Genders\",\n  key: \"BTSX\"\n}, {\n  value: \"Compare\",\n  key: \"CMP\"\n}];\n\nconst SerbiaData = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({}); //TODO reformat to avoid boilerplate\n\n  const dataFilter = useCallback(gender => {\n    let options = {\n      title: {\n        text: \"Blood Pressure index for Serbia population\"\n      }\n    };\n    let series;\n\n    if (gender.key !== \"CMP\") {\n      series = data.filter(_ref => {\n        let {\n          Dim1\n        } = _ref;\n        return Dim1 === gender.key;\n      }).map(_ref2 => {\n        let {\n          TimeDimensionValue,\n          NumericValue\n        } = _ref2;\n        return [parseInt(TimeDimensionValue), NumericValue];\n      }).sort((a, b) => {\n        return a[0] - b[0];\n      });\n      options = { ...options,\n        chart: {},\n        series: {\n          name: gender.value,\n          data: series\n        }\n      };\n      setChartOptions(options);\n    } else return null;\n  }, []); // const defineComparisonChart = () => {\n  //   let options = {\n  //     title: { text: \"Blood Pressure index comparison for Serbia population\" },\n  //   };\n  //   let series = [];\n  //   const maleData = data\n  //     .filter(({ Dim1 }) => Dim1 === \"MLE\")\n  //     .map(({ TimeDimensionValue, NumericValue }) => [\n  //       parseInt(TimeDimensionValue * -1),\n  //       NumericValue,\n  //     ])\n  //     .sort((a, b) => {\n  //       return a[0] - b[0];\n  //     });\n  // };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getSerbiaData();\n      setData(data);\n      dataFilter(buttons[0]);\n    };\n\n    getData();\n  }, [dataFilter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Serbia Graph here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), buttons.map(b => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          dataFilter(b);\n        },\n        children: b.value\n      }, b.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SerbiaData, \"gAqJPpc1lqZnA0zMD7a0TPNM6DE=\");\n\n_c = SerbiaData;\nexport default SerbiaData;\n\nvar _c;\n\n$RefreshReg$(_c, \"SerbiaData\");","map":{"version":3,"sources":["/home/milan/react-excercise/front/src/components/Serbia.js"],"names":["HighchartsReact","Highcharts","useCallback","useEffect","useState","DataProvider","filter","buttons","value","key","SerbiaData","data","setData","chartOptions","setChartOptions","dataFilter","gender","options","title","text","series","Dim1","map","TimeDimensionValue","NumericValue","parseInt","sort","a","b","chart","name","getData","getSerbiaData"],"mappings":";;;AAAA,OAAOA,eAAP,MAA4B,2BAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAASC,MAAT,QAAuB,MAAvB;;AAEA,MAAMC,OAAO,GAAG,CACd;AAAEC,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,GAAG,EAAE;AAAxB,CADc,EAEd;AAAED,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,GAAG,EAAE;AAAtB,CAFc,EAGd;AAAED,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,GAAG,EAAE;AAA9B,CAHc,EAId;AAAED,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,GAAG,EAAE;AAAzB,CAJc,CAAhB;;AAOA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD,CAFuB,CAIvB;;AACA,QAAMW,UAAU,GAAGb,WAAW,CAAEc,MAAD,IAAY;AACzC,QAAIC,OAAO,GAAG;AACZC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AADK,KAAd;AAGA,QAAIC,MAAJ;;AACA,QAAIJ,MAAM,CAACP,GAAP,KAAe,KAAnB,EAA0B;AACxBW,MAAAA,MAAM,GAAGT,IAAI,CACVL,MADM,CACC;AAAA,YAAC;AAAEe,UAAAA;AAAF,SAAD;AAAA,eAAcA,IAAI,KAAKL,MAAM,CAACP,GAA9B;AAAA,OADD,EAENa,GAFM,CAEF;AAAA,YAAC;AAAEC,UAAAA,kBAAF;AAAsBC,UAAAA;AAAtB,SAAD;AAAA,eAA0C,CAC7CC,QAAQ,CAACF,kBAAD,CADqC,EAE7CC,YAF6C,CAA1C;AAAA,OAFE,EAMNE,IANM,CAMD,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd,eAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACD,OARM,CAAT;AASAX,MAAAA,OAAO,GAAG,EACR,GAAGA,OADK;AAERY,QAAAA,KAAK,EAAE,EAFC;AAGRT,QAAAA,MAAM,EAAE;AAAEU,UAAAA,IAAI,EAAEd,MAAM,CAACR,KAAf;AAAsBG,UAAAA,IAAI,EAAES;AAA5B;AAHA,OAAV;AAMAN,MAAAA,eAAe,CAACG,OAAD,CAAf;AACD,KAjBD,MAiBO,OAAO,IAAP;AACR,GAvB6B,EAuB3B,EAvB2B,CAA9B,CALuB,CA8BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM4B,OAAO,GAAG,YAAY;AAC1B,YAAMpB,IAAI,GAAG,MAAMN,YAAY,CAAC2B,aAAb,EAAnB;AACApB,MAAAA,OAAO,CAACD,IAAD,CAAP;AAEAI,MAAAA,UAAU,CAACR,OAAO,CAAC,CAAD,CAAR,CAAV;AACD,KALD;;AAMAwB,IAAAA,OAAO;AACR,GARQ,EAQN,CAAChB,UAAD,CARM,CAAT;AASA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGR,OAAO,CAACe,GAAR,CAAaM,CAAD,IAAO;AAClB,0BACE;AACE,QAAA,OAAO,EAAE,MAAM;AACbb,UAAAA,UAAU,CAACa,CAAD,CAAV;AACD,SAHH;AAAA,kBAMGA,CAAC,CAACpB;AANL,SAIOoB,CAAC,CAACnB,GAJT;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,KAXA,CAFH,eAcE,QAAC,eAAD;AAAiB,MAAA,UAAU,EAAER,UAA7B;AAAyC,MAAA,OAAO,EAAEY;AAAlD;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAzED;;GAAMH,U;;KAAAA,U;AA2EN,eAAeA,UAAf","sourcesContent":["import HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport { filter } from \"rxjs\";\n\nconst buttons = [\n  { value: \"Female\", key: \"FMLE\" },\n  { value: \"Male\", key: \"MLE\" },\n  { value: \"Both Genders\", key: \"BTSX\" },\n  { value: \"Compare\", key: \"CMP\" },\n];\n\nconst SerbiaData = () => {\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n\n  //TODO reformat to avoid boilerplate\n  const dataFilter = useCallback((gender) => {\n    let options = {\n      title: { text: \"Blood Pressure index for Serbia population\" },\n    };\n    let series;\n    if (gender.key !== \"CMP\") {\n      series = data\n        .filter(({ Dim1 }) => Dim1 === gender.key)\n        .map(({ TimeDimensionValue, NumericValue }) => [\n          parseInt(TimeDimensionValue),\n          NumericValue,\n        ])\n        .sort((a, b) => {\n          return a[0] - b[0];\n        });\n      options = {\n        ...options,\n        chart: {},\n        series: { name: gender.value, data: series },\n      };\n\n      setChartOptions(options);\n    } else return null;\n  }, []);\n\n  // const defineComparisonChart = () => {\n  //   let options = {\n  //     title: { text: \"Blood Pressure index comparison for Serbia population\" },\n  //   };\n  //   let series = [];\n  //   const maleData = data\n  //     .filter(({ Dim1 }) => Dim1 === \"MLE\")\n  //     .map(({ TimeDimensionValue, NumericValue }) => [\n  //       parseInt(TimeDimensionValue * -1),\n  //       NumericValue,\n  //     ])\n  //     .sort((a, b) => {\n  //       return a[0] - b[0];\n  //     });\n  // };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getSerbiaData();\n      setData(data);\n\n      dataFilter(buttons[0]);\n    };\n    getData();\n  }, [dataFilter]);\n  return (\n    <div>\n      <h2>Serbia Graph here</h2>\n      {buttons.map((b) => {\n        return (\n          <button\n            onClick={() => {\n              dataFilter(b);\n            }}\n            key={b.key}\n          >\n            {b.value}\n          </button>\n        );\n      })}\n      <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n    </div>\n  );\n};\n\nexport default SerbiaData;\n"]},"metadata":{},"sourceType":"module"}