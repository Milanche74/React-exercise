{"ast":null,"code":"var _jsxFileName = \"/home/milan/react-excercise/front/src/components/DataVisualization.js\",\n    _s = $RefreshSig$();\n\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport InputEmmiter from \"../services/InputEmmiter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst buttons = [{\n  value: \"Female\",\n  key: \"FMLE\",\n  active: true\n}, {\n  value: \"Male\",\n  key: \"MLE\",\n  active: true\n}, {\n  value: \"Median\",\n  key: \"BTSX\",\n  active: true\n}, {\n  value: \"Compare\",\n  key: \"CMP\",\n  active: false\n}];\n\nconst formatRangeValues = data => {\n  const valuesArray = data.map(_ref => {\n    let {\n      TimeDimensionValue\n    } = _ref;\n    return TimeDimensionValue;\n  });\n  const rangeMinMaxValues = [Math.min(...valuesArray), Math.max(...valuesArray)];\n  InputEmmiter.rangeMinMaxValues.next(rangeMinMaxValues);\n  return rangeMinMaxValues;\n};\n\nconst dataFilter = (key, data) => {\n  let series;\n  series = data === null || data === void 0 ? void 0 : data.filter(_ref2 => {\n    let {\n      Dim1\n    } = _ref2;\n    return Dim1 === key;\n  }).map(_ref3 => {\n    let {\n      TimeDimensionValue,\n      NumericValue\n    } = _ref3;\n    return [TimeDimensionValue, NumericValue];\n  }).sort((a, b) => {\n    return a[0] - b[0];\n  });\n  return series;\n};\n\nconst getMinYAxisValue = data => {\n  let extractedValues = [];\n  data.forEach(arr => {\n    extractedValues.push(arr[1]);\n  });\n  return Math.floor(Math.min(...extractedValues));\n};\n\nconst lineChartOptions = (buttons, data) => {\n  const series = [];\n  let options = {};\n  buttons.forEach(btn => {\n    if (btn.active) {\n      series.push({\n        name: btn.value,\n        data: dataFilter(btn.key, data),\n        color: `hsl(${buttons.indexOf(btn) * 120}, 100%, 75%)`,\n        marker: {\n          symbol: \"circle\"\n        }\n      });\n    }\n  });\n  options = {\n    title: {\n      text: \"Blood Pressure index for population\"\n    },\n    yAxis: {\n      min: null,\n      max: null\n    },\n    xAxis: {\n      reversed: false,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: `Blood pressure index for chosen categories`\n      }\n    },\n    plotOptions: {\n      series: {\n        stacking: undefined,\n        events: {\n          legendItemClick: function () {\n            return false;\n          }\n        }\n      }\n    },\n    chart: {\n      type: \"line\"\n    },\n    series: series\n  };\n  return options;\n};\n\nconst comparisonChartOptions = data => {\n  let options = {\n    title: {\n      text: \"Blood Pressure index comparison by gender\"\n    }\n  };\n  const femaleSeries = dataFilter(\"FMLE\", data);\n  const maleSeries = dataFilter(\"MLE\", data);\n  maleSeries.forEach(s => {\n    s[1] = s[1] * -1;\n  });\n  const yAxisMinValue = getMinYAxisValue(maleSeries);\n  const yAxisMaxValue = yAxisMinValue * -1;\n  options = { ...options,\n    chart: {\n      type: \"bar\"\n    },\n    accessibility: {\n      point: {\n        valueDescriptionFormat: \"{index}. Age {xDescription}, {value}%.\"\n      }\n    },\n    xAxis: [{\n      reversed: false,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: \"Blood pressure index (female)\"\n      }\n    }, {\n      // mirror axis on right side\n      opposite: true,\n      reversed: false,\n      linkedTo: 0,\n      labels: {\n        step: 1\n      },\n      accessibility: {\n        description: \"Blood pressure index (male)\"\n      }\n    }],\n    yAxis: {\n      title: {\n        text: null\n      },\n      min: yAxisMinValue,\n      max: yAxisMaxValue,\n      labels: {\n        formatter: function () {\n          return Math.abs(this.value);\n        }\n      },\n      accessibility: {\n        description: \"Blood pressure index, comparison by gender in Serbia\"\n      }\n    },\n    plotOptions: {\n      series: {\n        stacking: \"normal\",\n        pointWidth: 5\n      }\n    },\n    tooltip: {\n      formatter: function () {\n        return \"<b>\" + this.series.name + \", year \" + this.point.category + \"</b><br/>\" + \"BP index: \" + Highcharts.numberFormat(Math.abs(this.point.y), 1);\n      }\n    },\n    series: [{\n      name: \"Male\",\n      data: maleSeries\n    }, {\n      name: \"Female\",\n      data: femaleSeries\n    }]\n  };\n  return options;\n};\n\nconst DataVisulization = _ref4 => {\n  _s();\n\n  let {\n    param\n  } = _ref4;\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n  const [rangeValues, setRangeValues] = useState([]);\n\n  const optionSetter = button => {\n    let options;\n    let i = buttons.indexOf(button);\n    buttons[i].active = !buttons[i].active;\n    let filteredData = data === null || data === void 0 ? void 0 : data.filter(obj => obj.TimeDimensionValue >= rangeValues[0] && obj.TimeDimensionValue <= rangeValues[1]);\n\n    if (button.key !== \"CMP\") {\n      buttons[buttons.length - 1].active = false;\n      options = lineChartOptions(buttons, filteredData);\n      setChartOptions(options);\n    } else {\n      buttons.forEach(btn => {\n        if (buttons.indexOf(btn) !== buttons.length - 1) {\n          btn.active = false;\n        } else {\n          btn.active = true;\n        }\n      });\n      const options = comparisonChartOptions(data);\n      setChartOptions(options);\n    }\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getData(param);\n      setData(data);\n      let initialRangeValues = formatRangeValues(data);\n      setRangeValues(initialRangeValues);\n    };\n\n    getData();\n  }, [param]);\n  useEffect(() => {\n    const subscription = InputEmmiter.rangeEmmiter.subscribe(values => {\n      let options;\n\n      if (values.length > 0) {\n        setRangeValues(values);\n        let filteredData = data === null || data === void 0 ? void 0 : data.filter(obj => obj.TimeDimensionValue >= values[0] && obj.TimeDimensionValue <= values[1]);\n        options = buttons[buttons.length - 1] ? comparisonChartOptions(buttons, filteredData) : lineChartOptions(buttons, filteredData);\n      } else {\n        options = lineChartOptions(buttons, data);\n      }\n\n      setChartOptions(options);\n    });\n    return () => subscription.unsubscribe();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [param.toUpperCase(), \" Graph\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), buttons.map(b => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          optionSetter(b);\n        },\n        children: b.value\n      }, b.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataVisulization, \"2iF342GsxGSWhlMlyJsl0eSio3c=\");\n\n_c = DataVisulization;\nexport default DataVisulization;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataVisulization\");","map":{"version":3,"sources":["/home/milan/react-excercise/front/src/components/DataVisualization.js"],"names":["HighchartsReact","Highcharts","useEffect","useState","DataProvider","InputEmmiter","buttons","value","key","active","formatRangeValues","data","valuesArray","map","TimeDimensionValue","rangeMinMaxValues","Math","min","max","next","dataFilter","series","filter","Dim1","NumericValue","sort","a","b","getMinYAxisValue","extractedValues","forEach","arr","push","floor","lineChartOptions","options","btn","name","color","indexOf","marker","symbol","title","text","yAxis","xAxis","reversed","labels","step","accessibility","description","plotOptions","stacking","undefined","events","legendItemClick","chart","type","comparisonChartOptions","femaleSeries","maleSeries","s","yAxisMinValue","yAxisMaxValue","point","valueDescriptionFormat","opposite","linkedTo","formatter","abs","pointWidth","tooltip","category","numberFormat","y","DataVisulization","param","setData","chartOptions","setChartOptions","rangeValues","setRangeValues","optionSetter","button","i","filteredData","obj","length","getData","initialRangeValues","subscription","rangeEmmiter","subscribe","values","unsubscribe","toUpperCase"],"mappings":"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","sourcesContent":["import HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { useEffect, useState } from \"react\";\nimport DataProvider from \"../services/DataProvider\";\nimport InputEmmiter from \"../services/InputEmmiter\";\n\nconst buttons = [\n  { value: \"Female\", key: \"FMLE\", active: true },\n  { value: \"Male\", key: \"MLE\", active: true },\n  { value: \"Median\", key: \"BTSX\", active: true },\n  { value: \"Compare\", key: \"CMP\", active: false },\n];\n\nconst formatRangeValues = (data) => {\n  const valuesArray = data.map(({ TimeDimensionValue }) => TimeDimensionValue);\n  const rangeMinMaxValues = [\n    Math.min(...valuesArray),\n    Math.max(...valuesArray),\n  ];\n  InputEmmiter.rangeMinMaxValues.next(rangeMinMaxValues);\n  return rangeMinMaxValues;\n};\n\nconst dataFilter = (key, data) => {\n  let series;\n\n  series = data\n    ?.filter(({ Dim1 }) => Dim1 === key)\n    .map(({ TimeDimensionValue, NumericValue }) => [\n      TimeDimensionValue,\n      NumericValue,\n    ])\n    .sort((a, b) => {\n      return a[0] - b[0];\n    });\n\n  return series;\n};\n\nconst getMinYAxisValue = (data) => {\n  let extractedValues = [];\n  data.forEach((arr) => {\n    extractedValues.push(arr[1]);\n  });\n\n  return Math.floor(Math.min(...extractedValues));\n};\n\nconst lineChartOptions = (buttons, data) => {\n  const series = [];\n  let options = {};\n  buttons.forEach((btn) => {\n    if (btn.active) {\n      series.push({\n        name: btn.value,\n        data: dataFilter(btn.key, data),\n        color: `hsl(${buttons.indexOf(btn) * 120}, 100%, 75%)`,\n        marker: {\n          symbol: \"circle\",\n        },\n      });\n    }\n  });\n\n  options = {\n    title: { text: \"Blood Pressure index for population\" },\n    yAxis: {\n      min: null,\n      max: null,\n    },\n    xAxis: {\n      reversed: false,\n      labels: {\n        step: 1,\n      },\n      accessibility: {\n        description: `Blood pressure index for chosen categories`,\n      },\n    },\n    plotOptions: {\n      series: {\n        stacking: undefined,\n        events: {\n          legendItemClick: function () {\n            return false;\n          },\n        },\n      },\n    },\n\n    chart: { type: \"line\" },\n    series: series,\n  };\n\n  return options;\n};\n\nconst comparisonChartOptions = (data) => {\n  let options = {\n    title: { text: \"Blood Pressure index comparison by gender\" },\n  };\n  const femaleSeries = dataFilter(\"FMLE\", data);\n  const maleSeries = dataFilter(\"MLE\", data);\n  maleSeries.forEach((s) => {\n    s[1] = s[1] * -1;\n  });\n\n  const yAxisMinValue = getMinYAxisValue(maleSeries);\n  const yAxisMaxValue = yAxisMinValue * -1;\n\n  options = {\n    ...options,\n    chart: {\n      type: \"bar\",\n    },\n    accessibility: {\n      point: {\n        valueDescriptionFormat: \"{index}. Age {xDescription}, {value}%.\",\n      },\n    },\n    xAxis: [\n      {\n        reversed: false,\n        labels: {\n          step: 1,\n        },\n        accessibility: {\n          description: \"Blood pressure index (female)\",\n        },\n      },\n      {\n        // mirror axis on right side\n        opposite: true,\n        reversed: false,\n        linkedTo: 0,\n        labels: {\n          step: 1,\n        },\n        accessibility: {\n          description: \"Blood pressure index (male)\",\n        },\n      },\n    ],\n    yAxis: {\n      title: {\n        text: null,\n      },\n      min: yAxisMinValue,\n      max: yAxisMaxValue,\n      labels: {\n        formatter: function () {\n          return Math.abs(this.value);\n        },\n      },\n      accessibility: {\n        description: \"Blood pressure index, comparison by gender in Serbia\",\n      },\n    },\n    plotOptions: {\n      series: {\n        stacking: \"normal\",\n        pointWidth: 5,\n      },\n    },\n    tooltip: {\n      formatter: function () {\n        return (\n          \"<b>\" +\n          this.series.name +\n          \", year \" +\n          this.point.category +\n          \"</b><br/>\" +\n          \"BP index: \" +\n          Highcharts.numberFormat(Math.abs(this.point.y), 1)\n        );\n      },\n    },\n    series: [\n      {\n        name: \"Male\",\n        data: maleSeries,\n      },\n      {\n        name: \"Female\",\n        data: femaleSeries,\n      },\n    ],\n  };\n  return options;\n};\n\nconst DataVisulization = ({ param }) => {\n  const [data, setData] = useState([]);\n  const [chartOptions, setChartOptions] = useState({});\n  const [rangeValues, setRangeValues] = useState([]);\n\n  const optionSetter = (button) => {\n    let options;\n    let i = buttons.indexOf(button);\n    buttons[i].active = !buttons[i].active;\n    let filteredData = data?.filter(\n      (obj) =>\n        obj.TimeDimensionValue >= rangeValues[0] &&\n        obj.TimeDimensionValue <= rangeValues[1]\n    );\n\n    if (button.key !== \"CMP\") {\n      buttons[buttons.length - 1].active = false;\n\n      options = lineChartOptions(buttons, filteredData);\n      setChartOptions(options);\n    } else {\n      buttons.forEach((btn) => {\n        if (buttons.indexOf(btn) !== buttons.length - 1) {\n          btn.active = false;\n        } else {\n          btn.active = true;\n        }\n      });\n\n      const options = comparisonChartOptions(data);\n      setChartOptions(options);\n    }\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await DataProvider.getData(param);\n      setData(data);\n      let initialRangeValues = formatRangeValues(data);\n      setRangeValues(initialRangeValues);\n    };\n\n    getData();\n  }, [param]);\n\n  useEffect(() => {\n    const subscription = InputEmmiter.rangeEmmiter.subscribe((values) => {\n      let options;\n\n      if (values.length > 0) {\n        setRangeValues(values);\n        let filteredData = data?.filter(\n          (obj) =>\n            obj.TimeDimensionValue >= values[0] &&\n            obj.TimeDimensionValue <= values[1]\n        );\n\n        options = buttons[buttons.length - 1]\n          ? comparisonChartOptions(buttons, filteredData)\n          : lineChartOptions(buttons, filteredData);\n      } else {\n        options = lineChartOptions(buttons, data);\n      }\n      setChartOptions(options);\n    });\n    return () => subscription.unsubscribe();\n  }, [data]);\n\n  return (\n    <div>\n      <h2>{param.toUpperCase()} Graph</h2>\n      {buttons.map((b) => {\n        return (\n          <button\n            onClick={() => {\n              optionSetter(b);\n            }}\n            key={b.key}\n          >\n            {b.value}\n          </button>\n        );\n      })}\n      <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n    </div>\n  );\n};\n\nexport default DataVisulization;\n"]},"metadata":{},"sourceType":"module"}